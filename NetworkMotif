import csv
from collections import defaultdict
from itertools import combinations

def load_graph_from_csv(file_path):
    graph = defaultdict(set)
    with open(file_path, 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            source, target = row
            graph[source].add(target)
    return graph

def identify_motif(u, v, w, graph):
    # Define directed edges among nodes
    uv = (v in graph[u])
    vu = (u in graph[v])
    uw = (w in graph[u])
    wu = (u in graph[w])
    vw = (w in graph[v])
    wv = (v in graph[w])

    # Identify motifs based on presence of edges
    if uv and vw and wu:
        return "Motif 11"  # Complete directed triangle
    elif uv and vw and wv:
        return "Motif 13"  # Fully connected, bidirectional
    elif uv and vu and wv:
        return "Motif 12"  # Feedback loop with extra edge
    elif uv and vu:
        if vw:
            return "Motif 9"  # Chain + direct edge
        elif wu:
            return "Motif 7"  # V-Structure with reverse edge
        else:
            return "Motif 1"  # Basic V-Structure
    elif uv and vw:
        if wv:
            return "Motif 10"  # V-Structure + extra edge
        elif wu:
            return "Motif 5"  # Chain + extra edge
        else:
            return "Motif 2"  # Simple Chain
    elif vu and wv:
        if uw:
            return "Motif 4"  # V-Structure + extra edge
        else:
            return "Motif 3"  # Reverse Chain
    elif uw and wu:
        return "Motif 6"  # Cycle
    elif uv or vu or vw or wv or uw or wu:
        return "Motif 8"  # Partial triangle or mixed loop
    else:
        return "Disconnected"

def count_motifs(graph):
    motif_counts = {f"Motif {i}": 0 for i in range(1, 14)}

    nodes = list(graph.keys())
    for u, v, w in combinations(nodes, 3):
        motif = identify_motif(u, v, w, graph)
        if motif != "Disconnected":
            motif_counts[motif] += 1

    return motif_counts

def main(input_csv):
    graph = load_graph_from_csv(input_csv)
    motif_counts = count_motifs(graph)

    for motif, count in motif_counts.items():
        print(f"{motif}: {count}")

if __name__ == "__main__":
    input_csv = 'facebookN333E2520.csv'  # Replace with your actual CSV file path
    main(input_csv)

